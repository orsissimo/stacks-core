name: Run Flaky Groups with Controlled Stress

on:
  push:
    branches:
      - test/flaky-sandbox
  workflow_dispatch:
    inputs:
      iterations:
        description: "Number of iterations per test group"
        required: false
        default: "3"
      cooldown:
        description: "Cooldown seconds between test runs"
        required: false
        default: "90"
      stress_level:
        description: "CPU stress level (percentage)"
        required: false
        default: "50"
      specific_group:
        description: "Specific test group to run (leave empty for all groups)"
        required: false
        default: ""

env:
  BITCOIND_TEST: 1
  RUST_BACKTRACE: full

jobs:
  run-flaky-tests:
    name: Run Flaky Tests with Controlled Stress
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rust-src

      - name: Display system info
        run: |
          echo "CPU Info:"
          lscpu
          echo "-------------"
          echo "Memory Info:"
          free -h
          echo "-------------"
          echo "Disk Info:"
          df -h
          echo "-------------"

      - name: Install Bitcoin Core
        run: |
          wget https://bitcoincore.org/bin/bitcoin-core-26.0/bitcoin-26.0-x86_64-linux-gnu.tar.gz
          tar -xzf bitcoin-26.0-x86_64-linux-gnu.tar.gz
          sudo install -m 0755 -o root -g root -t /usr/local/bin bitcoin-26.0/bin/*
          bitcoind --version

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y lsof bc stress

      - name: Make scripts executable
        run: |
          chmod +x ./investigate.sh
          chmod +x ./run-flaky-test-groups.sh
          chmod +x ./create-group-report.sh

      # Pre-build the project to avoid repeated compilations
      - name: Pre-build the project
        run: |
          cargo +nightly build --tests

      - name: Apply controlled stress to the runner
        run: |
          THREADS=$(nproc)
          STRESS_PERCENTAGE=${{ github.event.inputs.stress_level || '50' }}

          # Calculate the number of threads to stress based on percentage
          STRESS_THREADS=$(echo "$THREADS * $STRESS_PERCENTAGE / 100" | bc)
          STRESS_THREADS=${STRESS_THREADS%.*}

          # Ensure at least 1 thread is used for stress
          if [ "$STRESS_THREADS" -lt 1 ]; then
            STRESS_THREADS=1
          fi

          echo "Detected $THREADS CPU threads. Stressing with $STRESS_THREADS threads ($STRESS_PERCENTAGE%)."

          # Run the stress command in background with a more controlled approach
          stress --cpu "$STRESS_THREADS" &
          STRESS_PID=$!
          echo "Stress process started with PID: $STRESS_PID"

          # Store the PID for later termination
          echo "STRESS_PID=$STRESS_PID" >> $GITHUB_ENV

      - name: Run flaky tests
        run: |
          ./run-flaky-test-groups.sh "${{ github.event.inputs.iterations || '3' }}" "${{ github.event.inputs.cooldown || '90' }}" "${{ github.event.inputs.specific_group }}"
        timeout-minutes: 180

      - name: Stop stress tool
        if: always()
        run: |
          if [ -n "$STRESS_PID" ]; then
            echo "Stopping stress process with PID: $STRESS_PID"
            kill -TERM $STRESS_PID || true
          fi
          # Make sure all stress processes are stopped
          pkill -f stress || true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: flaky-test-results-stress
          path: |
            test_reports
            summary_report.md
          retention-days: 7

      - name: Add summary to workflow
        run: |
          echo "# Flaky Tests Investigation Results (with Stress)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat summary_report.md >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Full test results are available in the uploaded artifacts." >> $GITHUB_STEP_SUMMARY
